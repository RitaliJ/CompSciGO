What is the output if mystery(5) is called in another class?
*...***...*****...**********
*****
What is the output if mystery(-1) is called in another class?
nothing...**...******...***********
nothing
What is the output if mystery(20) is called in another class?
nothing...*...*****...**********
nothing
&&&
public void mystery(int x){
  for(int i = x; i < 10; i++){
    System.out.print("*");
  }
}
&&&
What is the value of y on Line 2 if mystery(4) outputs 6?
0...1...2...3
1
What is the value of y on Line 2 if mystery(6) outputs 5?
0...1...2...3
2
What is the value of mystery(4) if y = 7 on Line 2?
0...1...2...3
3
What is the value of mystery(2) if y = -1 on Line 2?
0...1...2...3
0
&&&
public int mystery(int x) {
  int y = ?; // Line 2
  int z = x;
  z /= y;
  z += 2;
  System.out.println(z);
}
&&&
What is the output of mystery(0) if a equals 1?
1...2...3...4
1
What is the output of mystery(1) if a equals 2?
1...2...3...4
2
What is the output of mystery(-1) if a equals -2?
1...2...3...4
4
&&&
public void mystery(int x) {
  int a = BLANK;
  int b = x;
  int c = -1;
  if ((b + 1) == a) {
    b++;
    c += b;
  }
  if (c == a) {
    a--;
    b = 4;
  }
  System.out.println(b);
}
&&&
What is the value of dessert after the code segment has been executed?
strawpieberry...piestrawpieberry...strawpieberrypie...strawberry
piestrawpieberry
&&&
String dessert = "pie";
dessert += "straw" + dessert + "berry";
&&&
What are the values of a, b, and c after this code segment has been executed?
a=0,b=4,c=0...a=0,b=4,c=1...a=1,b=0,c=-1...a=1,b=1,c=0
a=1,b=1,c=0
What is the value of a after this code segment has been executed?
0...1...3...4
1
What is the value of b after this code segment has been executed?
0...1...3...4
1
What is the value of c after this code segment has been executed?
0...1...3...4
0
&&&
int a = 1;
int b = 0;
int c = -1;
if ((b + 1) == a) {
  b++;
  c += b;
}
if (c == a) {
  a--;
  b = 4;
}
&&&
For which of the following values of a, b, and c does the code segment NOT print the correct minimum value? Assume all variables are declared and initialized properly.
a=1,b=1,c=2...a=1,b=2,c=1...a=1,b=2,c=3...a=2,b=2,c=2
a=1,b=2,c=1
&&&
if (a > b && b > c) {
  low = c;
}
if (a > b && c > b) {
  low = b;
}
else {
  low = a;
}
System.out.println(a + b + c - low);
&&&
Consider the following code segment, which is intended to store the sum of all multiples of 10 between 10 and 100, inclusive (10 + 20 + ... + 100), in the variable total. Which of the following can be used as a replacement for /* missing code */ so that the code segment works as intended?
x<100...x<=100...x>10...x>=10
x>=10
&&&
int x = 100;
int total = 0;
while( /* missing code */ ) {
  total = total + x;
  x = x - 10;
}
&&&
Consider the following incomplete code segment, which is intended to print the sum of the digits in num. For example, when num is 12345, the code segment should print 15, which represents the sum 1 + 2 + 3 + 4 + 5. Which of the following should replace /* missing loop header */ so that the code segment will work as intended?
while(num>0)...while(num>=0)...while(num>1)...while (num>2)
while(num>0)
&&&
int num = 12345;
int sum = 0;
/* missing loop header */ {
  sum += num % 10;
  num /= 10;
}
System.out.println(sum);
&&&
Consider the following method substringFound, which is intended to return true if a substring, key, is located at a specific index of the string phrase. Otherwise, it should return false. Which of the following is the best precondition for index (assuming index >= 0) so that the method will return the appropriate result in all cases and a runtime error can be avoided? Precondition: index must be <=
p.length()...k.length()...p.length()+k.length()...p.length()-k.length()
p.length()-k.length()
&&&
public boolean substringFound(String p, String k, int index)
{
  String part = p.substring(index, 
                index + k.length());
  return part.equals(k);
}
&&&
Consider the following recursive method, which is intended to display the binary equivalent of a decimal number. For example, toBinary(100) should display 1100100.
Which of the following can replace /* missing code */ so that toBinary works as intended?
num%2...num/2...num+2...num-2
num%2
&&&
public static void toBinary(int num) {
  if (num < 2) {
    System.out.print(num);
  }
  else {
    toBinary(num / 2);
    System.out.println(/* missing code */);
  }
}
&&&
Consider the following method, which is intended to return the sum of all the even digits in its parameter num. For example, sumEvens(15555234) should return 6, the sum of 2 and 4. Which of the following can be used as a replacement for /* missing statement */ so that the sumEvens method works as intended?
sumEvens(num*10);...sumEvens(num);...sumEvens(num%10);...sumEvens(num/10);
sumEvens(num/10);
&&&
/** Precondition: num >= 0 */
public static int sumEvens(int num) {
  if (num < 10 && num % 2 == 0) {
    return num;
  }
  else if (num < 10) {
    return 0;
  }
  else if (num >= 10 && num % 2 == 0) {
    return num % 10 + /* missing statement */
  }
  else {
    return sumEvens(num / 10);
  }
}
&&&
What is printed if mystery(3) is called?
30...15...4..19
19
What is printed if mystery(4) is called?
31...16...5...21
16
What is printed if mystery(5) is called?
0...16...20...5 
16
What is printed if mystery(0) is called?
4...13...error...26
error
What is printed if mystery(-1) is called?
13...17...14...18
13
&&&
public void mystery(int x) {
  System.out.println(3 / x + 5 % 3 * 8);
}
&&&
Which line will cause the error, assuming Lines 1 through 7 appear in a class under than Thing or MoreThing?
Line 3...Line 5...Line 6...Line 7 
Line 5
&&&
public class Thing 
  { /* implementation not shown */ }
public class MoreThing extends Thing
  { /* implementation not shown */ }

Thing[] arr = new MoreThing[3]; // line 1
Thing t1 = new Thing();
Thing t2 = new MoreThing();     // line 3
MoreThing t3 = new MoreThing();
arr[0] = t1;                    // line 5
arr[1] = t2;                    // line 6
arr[2] = t3;                    // line 7